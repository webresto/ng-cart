import { Injectable } from '@angular/core';
import { BehaviorSubject, throwError, from } from 'rxjs';
import { catchError, filter, map, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@webresto/ng-core";
export class NgRestoCartService {
    constructor(net, eventer) {
        this.net = net;
        this.eventer = eventer;
        this.cartID = this.getCartId();
        this.cart = new BehaviorSubject(null);
        this.modifires = new BehaviorSubject([]);
        this.OrderFormChange = new BehaviorSubject(null);
        this.modifiresMessage = new BehaviorSubject([]);
        this.restrictions$ = this.net.get(`/restrictions`);
    }
    getCartId() {
        return localStorage.getItem('cartID');
    }
    getCart() {
        return this.net.get(`/cart${this.cartID ? '?cartId=' + this.cartID : ''}`).pipe(switchMap(data => {
            if (!data) {
                this.removeCartId();
            }
            ;
            return data ? from([data]) : this.net.get(`/cart}`);
        }), switchMap(data => {
            if (data.cart.state == 'ORDER') {
                return throwError(new Error('Cart in order state'));
            }
            else {
                if (!this.cartID) {
                    this.setCartId(data.cart.cartId);
                }
                ;
                this.cart.next(data.cart);
            }
            ;
            return this.cart;
        }), catchError(err => {
            this.removeCartId();
            return throwError(err);
        }));
    }
    addDishToCart(data) {
        if (this.modifiresMessage.value.length) {
            this.modifiresMessage.value.forEach(message => {
                this.eventer.emitMessageEvent(message);
            });
            return;
        }
        this.net.put('/cart/add', data).subscribe(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Блюдо добавлено в корзину')
             );*/
        }, () => {
            /*this.eventer.emitMessageEvent(
             new EventMessage('error', 'Ошибка', 'Не удалось добавить блюдо')
             )*/
        });
    }
    addDishToCart$(data) {
        if (this.modifiresMessage.value.length) {
            this.modifiresMessage.value.forEach(message => {
                this.eventer.emitMessageEvent(message);
            });
            return from([null]);
        }
        return this.net.put('/cart/add', data)
            .pipe(tap(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
        }));
    }
    setDishCountToCart(dishId, amount) {
        this.net.post('/cart/set', {
            dishId: dishId,
            cartId: this.cartID,
            amount: amount
        }).subscribe(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Изменено количество')
             );*/
        }, () => {
            /*this.eventer.emitMessageEvent(
             new EventMessage('error', 'Ошибка', 'Не удалось изменить количество')
             )*/
        });
    }
    setDishComment(dishId, comment) {
        return this.net.post('/cart/setcomment', {
            dishId: dishId,
            cartId: this.cartID,
            comment: comment
        }).pipe(tap(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
        }, () => { }));
    }
    removeDishFromCart$(dishId, amount) {
        return this.net.put('/cart/remove', {
            dishId: dishId,
            cartId: this.cartID,
            amount: amount
        })
            .pipe(tap(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
        }));
    }
    removeDishFromCart(dishId, amount) {
        this.net.put('/cart/remove', {
            dishId: dishId,
            cartId: this.cartID,
            amount: amount
        }).subscribe(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Блюдо успешно удалено')
             );*/
        }, () => {
            /*this.eventer.emitMessageEvent(
             new EventMessage('error', 'Ошибка', 'Не удалось удалить блюдо')
             )*/
        });
    }
    checkoutCart(data) {
        let order = {
            cartId: this.cartID,
            address: {
                streetId: data.street.id,
                home: data.house,
                housing: data.housing,
                // index: "1278",
                entrance: data.entrance,
                floor: data.floor,
                apartment: data.apartment
            },
            customer: {
                phone: data.phone,
                name: data.name,
                mail: data.email || undefined
            }
        };
        return this.orderCart(order);
    }
    orderCart(data) {
        return this.net.post('/order', data)
            .pipe(tap(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Заказ упешно оформлен')
             );*/
        }, error => {
            console.log("Ошибка оформления!", error);
            if (error.error && error.error.cart) {
                this.setCartId(error.error.cart.cartId);
                this.cart.next(error.error.cart);
                this.cartID = error.error.cart.cartId;
            }
            /*if (error.message) {
              this.eventer.emitMessageEvent(
                new EventMessage(error.message.type, error.message.title, error.message.body)
              );
            } else {
              this.eventer.emitMessageEvent(
                new EventMessage('error', 'Ошибка', 'Не удалось оформить заказ')
              );
            }*/
        }));
    }
    checkStreetV2(data) {
        return this.net.post('/check', data)
            .pipe(tap(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
        }, () => { }));
    }
    checkStreet(data) {
        this.net.post('/check', data).subscribe(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
        }, error => {
            if (error.error) {
                if (error.error.cart) {
                    this.setCartId(error.error.cart.cartId);
                    this.cart.next(error.error.cart);
                    this.cartID = error.error.cart.cartId;
                }
                /*this.eventer.emitMessageEvent(
                 new EventMessage(error.error.message.type, error.error.message.title, error.error.message.body)
                 );*/
            }
        });
    }
    setCartId(cartID) {
        localStorage.setItem('cartID', cartID);
        this.cartID = cartID;
    }
    removeCartId() {
        localStorage.removeItem('cartID');
        this.cartID = null;
    }
    userCart() {
        return this.cart;
    }
    setModifires(modifires, messages) {
        this.modifires.next(modifires);
        if (messages) {
            this.modifiresMessage.next(messages);
        }
        ;
    }
    getModifires() {
        return this.modifires.pipe();
    }
    productInCart(product) {
        return this.cart.pipe(filter(cart => 'cartId' in cart), map(cart => {
            var _a;
            return !!(cart && ((_a = cart === null || cart === void 0 ? void 0 : cart.dishes) === null || _a === void 0 ? void 0 : _a.find(dishInCart => dishInCart.dish.id === product.id)));
        }));
    }
    getPickupPoints(cartId) {
        return this.net.get('/pickupaddreses', true, {
            params: {
                cartId
            }
        });
    }
    getPaymentMethods(cartId) {
        return this.net.get('/paymentmethods', true, {
            params: {
                cartId
            }
        });
    }
}
NgRestoCartService.ɵfac = function NgRestoCartService_Factory(t) { return new (t || NgRestoCartService)(i0.ɵɵinject(i1.NetService), i0.ɵɵinject(i1.EventerService)); };
NgRestoCartService.ɵprov = i0.ɵɵdefineInjectable({ token: NgRestoCartService, factory: NgRestoCartService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NgRestoCartService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.NetService }, { type: i1.EventerService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,