import { Injectable } from '@angular/core';
import { BehaviorSubject, throwError, from } from 'rxjs';
import { catchError, filter, map, switchMap, tap } from 'rxjs/operators';
import { NetService, EventerService } from '@webresto/ng-core';
import * as i0 from "@angular/core";
import * as i1 from "@webresto/ng-core";
export class NgRestoCartService {
    constructor(net, eventer) {
        this.net = net;
        this.eventer = eventer;
        this.cartID = this.getCartId();
        this.cart = new BehaviorSubject(null);
        this.modifires = new BehaviorSubject([]);
        this.OrderFormChange = new BehaviorSubject(null);
        this.modifiresMessage = new BehaviorSubject([]);
        this.restrictions$ = this.net.get(`/restrictions`);
    }
    getCartId() {
        return localStorage.getItem('cartID');
    }
    getCart() {
        return this.net.get(`/cart${this.cartID ? '?cartId=' + this.cartID : ''}`).pipe(switchMap(data => {
            if (!data) {
                this.removeCartId();
            }
            ;
            return data ? from([data]) : this.net.get(`/cart}`);
        }), switchMap(data => {
            if (data.cart.state == 'ORDER') {
                return throwError(new Error('Cart in order state'));
            }
            else {
                if (!this.cartID) {
                    this.setCartId(data.cart.cartId);
                }
                ;
                this.cart.next(data.cart);
            }
            ;
            return this.cart;
        }), catchError(err => {
            this.removeCartId();
            return throwError(err);
        }));
    }
    addDishToCart(data) {
        if (this.modifiresMessage.value.length) {
            this.modifiresMessage.value.forEach(message => {
                this.eventer.emitMessageEvent(message);
            });
            return;
        }
        this.net.put('/cart/add', data).subscribe(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Блюдо добавлено в корзину')
             );*/
        }, () => {
            /*this.eventer.emitMessageEvent(
             new EventMessage('error', 'Ошибка', 'Не удалось добавить блюдо')
             )*/
        });
    }
    addDishToCart$(data) {
        if (this.modifiresMessage.value.length) {
            this.modifiresMessage.value.forEach(message => {
                this.eventer.emitMessageEvent(message);
            });
            return from([null]);
        }
        return this.net.put('/cart/add', data)
            .pipe(tap(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
        }));
    }
    setDishCountToCart(dishId, amount) {
        this.net.post('/cart/set', {
            dishId: dishId,
            cartId: this.cartID,
            amount: amount
        }).subscribe(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Изменено количество')
             );*/
        }, () => {
            /*this.eventer.emitMessageEvent(
             new EventMessage('error', 'Ошибка', 'Не удалось изменить количество')
             )*/
        });
    }
    setDishComment(dishId, comment) {
        return this.net.post('/cart/setcomment', {
            dishId: dishId,
            cartId: this.cartID,
            comment: comment
        }).pipe(tap(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
        }, () => { }));
    }
    removeDishFromCart$(dishId, amount) {
        return this.net.put('/cart/remove', {
            dishId: dishId,
            cartId: this.cartID,
            amount: amount
        })
            .pipe(tap(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
        }));
    }
    removeDishFromCart(dishId, amount) {
        this.net.put('/cart/remove', {
            dishId: dishId,
            cartId: this.cartID,
            amount: amount
        }).subscribe(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Блюдо успешно удалено')
             );*/
        }, () => {
            /*this.eventer.emitMessageEvent(
             new EventMessage('error', 'Ошибка', 'Не удалось удалить блюдо')
             )*/
        });
    }
    checkoutCart(data) {
        let order = {
            cartId: this.cartID,
            address: {
                streetId: data.street.id,
                home: data.house,
                housing: data.housing,
                // index: "1278",
                entrance: data.entrance,
                floor: data.floor,
                apartment: data.apartment
            },
            customer: {
                phone: data.phone,
                name: data.name,
                mail: data.email || undefined
            }
        };
        return this.orderCart(order);
    }
    orderCart(data) {
        return this.net.post('/order', data)
            .pipe(tap(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
            /*this.eventer.emitMessageEvent(
             new EventMessage('success', 'Успех', 'Заказ упешно оформлен')
             );*/
        }, error => {
            console.log("Ошибка оформления!", error);
            if (error.error && error.error.cart) {
                this.setCartId(error.error.cart.cartId);
                this.cart.next(error.error.cart);
                this.cartID = error.error.cart.cartId;
            }
            /*if (error.message) {
              this.eventer.emitMessageEvent(
                new EventMessage(error.message.type, error.message.title, error.message.body)
              );
            } else {
              this.eventer.emitMessageEvent(
                new EventMessage('error', 'Ошибка', 'Не удалось оформить заказ')
              );
            }*/
        }));
    }
    checkStreetV2(data) {
        return this.net.post('/check', data)
            .pipe(tap(result => {
            this.setCartId(result.cart.cartId);
            this.cart.next(result.cart);
            this.cartID = result.cart.cartId;
        }, () => { }));
    }
    checkStreet(data) {
        this.net.post('/check', data).subscribe(res => {
            this.setCartId(res.cart.cartId);
            this.cart.next(res.cart);
            this.cartID = res.cart.cartId;
        }, error => {
            if (error.error) {
                if (error.error.cart) {
                    this.setCartId(error.error.cart.cartId);
                    this.cart.next(error.error.cart);
                    this.cartID = error.error.cart.cartId;
                }
                /*this.eventer.emitMessageEvent(
                 new EventMessage(error.error.message.type, error.error.message.title, error.error.message.body)
                 );*/
            }
        });
    }
    setCartId(cartID) {
        localStorage.setItem('cartID', cartID);
        this.cartID = cartID;
    }
    removeCartId() {
        localStorage.removeItem('cartID');
        this.cartID = null;
    }
    userCart() {
        return this.cart;
    }
    setModifires(modifires, messages) {
        this.modifires.next(modifires);
        if (messages) {
            this.modifiresMessage.next(messages);
        }
        ;
    }
    getModifires() {
        return this.modifires.pipe();
    }
    productInCart(product) {
        return this.cart.pipe(filter(cart => 'cartId' in cart), map(cart => {
            var _a;
            return !!(cart && ((_a = cart === null || cart === void 0 ? void 0 : cart.dishes) === null || _a === void 0 ? void 0 : _a.find(dishInCart => dishInCart.dish.id === product.id)));
        }));
    }
    getPickupPoints(cartId) {
        return this.net.get('/pickupaddreses', true, {
            params: {
                cartId
            }
        });
    }
    getPaymentMethods(cartId) {
        return this.net.get('/paymentmethods', true, {
            params: {
                cartId
            }
        });
    }
}
NgRestoCartService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgRestoCartService_Factory() { return new NgRestoCartService(i0.ɵɵinject(i1.NetService), i0.ɵɵinject(i1.EventerService)); }, token: NgRestoCartService, providedIn: "root" });
NgRestoCartService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgRestoCartService.ctorParameters = () => [
    { type: NetService },
    { type: EventerService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcmVzdG9jYXJ0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vcHJvamVjdHMvd2VicmVzdG8vbmctY2FydC9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbmctcmVzdG9jYXJ0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsZUFBZSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFNL0QsTUFBTSxPQUFPLGtCQUFrQjtJQVE3QixZQUFvQixHQUFlLEVBQVUsT0FBdUI7UUFBaEQsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBUHBFLFdBQU0sR0FBVyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbEMsU0FBSSxHQUEwQixJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RCxjQUFTLEdBQXlCLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFELG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUMscUJBQWdCLEdBQW9DLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBSTVFLGtCQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQW9CLGVBQWUsQ0FBQyxDQUFBO0lBRlEsQ0FBQztJQUl6RSxTQUFTO1FBQ1AsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxPQUFPO1FBQ0ws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LFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFMUSxVQUFVO1lBQUUsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCB0aHJvd0Vycm9yLCBmcm9tIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGZpbHRlciwgbWFwLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTmV0U2VydmljZSwgRXZlbnRlclNlcnZpY2UgfSBmcm9tICdAd2VicmVzdG8vbmctY29yZSc7XHJcbmltcG9ydCB7IEV2ZW50TWVzc2FnZSB9IGZyb20gJ0B3ZWJyZXN0by9uZy1jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nUmVzdG9DYXJ0U2VydmljZSB7XHJcbiAgY2FydElEOiBzdHJpbmcgPSB0aGlzLmdldENhcnRJZCgpO1xyXG4gIGNhcnQ6IEJlaGF2aW9yU3ViamVjdDxDYXJ0PiA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbCk7XHJcbiAgbW9kaWZpcmVzOiBCZWhhdmlvclN1YmplY3Q8YW55PiA9IG5ldyBCZWhhdmlvclN1YmplY3QoW10pO1xyXG4gIE9yZGVyRm9ybUNoYW5nZSA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbCk7XHJcblxyXG4gIG1vZGlmaXJlc01lc3NhZ2U6IEJlaGF2aW9yU3ViamVjdDxFdmVudE1lc3NhZ2VbXT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZXQ6IE5ldFNlcnZpY2UsIHByaXZhdGUgZXZlbnRlcjogRXZlbnRlclNlcnZpY2UpIHsgfVxyXG5cclxuICByZXN0cmljdGlvbnMkID0gdGhpcy5uZXQuZ2V0PFJlc3RyaWN0aW9uc09yZGVyPihgL3Jlc3RyaWN0aW9uc2ApXHJcblxyXG4gIGdldENhcnRJZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjYXJ0SUQnKTtcclxuICB9XHJcblxyXG4gIGdldENhcnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5uZXQuZ2V0PHsgY2FydDogQ2FydCB9PihgL2NhcnQke3RoaXMuY2FydElEID8gJz9jYXJ0SWQ9JyArIHRoaXMuY2FydElEIDogJyd9YCkucGlwZShcclxuICAgICAgc3dpdGNoTWFwKGRhdGEgPT4ge1xyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVDYXJ0SWQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBkYXRhID8gZnJvbShbZGF0YV0pIDogdGhpcy5uZXQuZ2V0PHsgY2FydDogQ2FydCB9PihgL2NhcnR9YClcclxuICAgICAgfSksXHJcbiAgICAgIHN3aXRjaE1hcChcclxuICAgICAgICBkYXRhID0+IHtcclxuICAgICAgICAgIGlmIChkYXRhLmNhcnQuc3RhdGUgPT0gJ09SREVSJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoJ0NhcnQgaW4gb3JkZXIgc3RhdGUnKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2FydElEKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRDYXJ0SWQoZGF0YS5jYXJ0LmNhcnRJZCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuY2FydC5uZXh0KGRhdGEuY2FydCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2FydDtcclxuICAgICAgICB9KSxcclxuICAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ2FydElkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBhZGREaXNoVG9DYXJ0KGRhdGEpIHtcclxuICAgIGlmICh0aGlzLm1vZGlmaXJlc01lc3NhZ2UudmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMubW9kaWZpcmVzTWVzc2FnZS52YWx1ZS5mb3JFYWNoKG1lc3NhZ2UgPT4ge1xyXG4gICAgICAgIHRoaXMuZXZlbnRlci5lbWl0TWVzc2FnZUV2ZW50KG1lc3NhZ2UpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubmV0LnB1dCgnL2NhcnQvYWRkJywgZGF0YSkuc3Vic2NyaWJlKFxyXG4gICAgICByZXMgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0Q2FydElkKHJlcy5jYXJ0LmNhcnRJZCk7XHJcbiAgICAgICAgdGhpcy5jYXJ0Lm5leHQocmVzLmNhcnQpO1xyXG4gICAgICAgIHRoaXMuY2FydElEID0gcmVzLmNhcnQuY2FydElkO1xyXG5cclxuICAgICAgICAvKnRoaXMuZXZlbnRlci5lbWl0TWVzc2FnZUV2ZW50KFxyXG4gICAgICAgICBuZXcgRXZlbnRNZXNzYWdlKCdzdWNjZXNzJywgJ9Cj0YHQv9C10YUnLCAn0JHQu9GO0LTQviDQtNC+0LHQsNCy0LvQtdC90L4g0LIg0LrQvtGA0LfQuNC90YMnKVxyXG4gICAgICAgICApOyovXHJcblxyXG4gICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgLyp0aGlzLmV2ZW50ZXIuZW1pdE1lc3NhZ2VFdmVudChcclxuICAgICAgICAgbmV3IEV2ZW50TWVzc2FnZSgnZXJyb3InLCAn0J7RiNC40LHQutCwJywgJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0LTQvtCx0LDQstC40YLRjCDQsdC70Y7QtNC+JylcclxuICAgICAgICAgKSovXHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkRGlzaFRvQ2FydCQoZGF0YSkge1xyXG4gICAgaWYgKHRoaXMubW9kaWZpcmVzTWVzc2FnZS52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5tb2RpZmlyZXNNZXNzYWdlLnZhbHVlLmZvckVhY2gobWVzc2FnZSA9PiB7XHJcbiAgICAgICAgdGhpcy5ldmVudGVyLmVtaXRNZXNzYWdlRXZlbnQobWVzc2FnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZnJvbShbbnVsbF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLm5ldC5wdXQoJy9jYXJ0L2FkZCcsIGRhdGEpXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcChyZXMgPT4ge1xyXG4gICAgICAgICAgdGhpcy5zZXRDYXJ0SWQocmVzLmNhcnQuY2FydElkKTtcclxuICAgICAgICAgIHRoaXMuY2FydC5uZXh0KHJlcy5jYXJ0KTtcclxuICAgICAgICAgIHRoaXMuY2FydElEID0gcmVzLmNhcnQuY2FydElkO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXREaXNoQ291bnRUb0NhcnQoZGlzaElkLCBhbW91bnQpIHtcclxuICAgIHRoaXMubmV0LnBvc3QoJy9jYXJ0L3NldCcsIHtcclxuICAgICAgZGlzaElkOiBkaXNoSWQsXHJcbiAgICAgIGNhcnRJZDogdGhpcy5jYXJ0SUQsXHJcbiAgICAgIGFtb3VudDogYW1vdW50XHJcbiAgICB9KS5zdWJzY3JpYmUoXHJcbiAgICAgIHJlcyA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRDYXJ0SWQocmVzLmNhcnQuY2FydElkKTtcclxuICAgICAgICB0aGlzLmNhcnQubmV4dChyZXMuY2FydCk7XHJcbiAgICAgICAgdGhpcy5jYXJ0SUQgPSByZXMuY2FydC5jYXJ0SWQ7XHJcbiAgICAgICAgLyp0aGlzLmV2ZW50ZXIuZW1pdE1lc3NhZ2VFdmVudChcclxuICAgICAgICAgbmV3IEV2ZW50TWVzc2FnZSgnc3VjY2VzcycsICfQo9GB0L/QtdGFJywgJ9CY0LfQvNC10L3QtdC90L4g0LrQvtC70LjRh9C10YHRgtCy0L4nKVxyXG4gICAgICAgICApOyovXHJcbiAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAvKnRoaXMuZXZlbnRlci5lbWl0TWVzc2FnZUV2ZW50KFxyXG4gICAgICAgICBuZXcgRXZlbnRNZXNzYWdlKCdlcnJvcicsICfQntGI0LjQsdC60LAnLCAn0J3QtSDRg9C00LDQu9C+0YHRjCDQuNC30LzQtdC90LjRgtGMINC60L7Qu9C40YfQtdGB0YLQstC+JylcclxuICAgICAgICAgKSovXHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzaENvbW1lbnQoZGlzaElkLCBjb21tZW50KSB7XHJcbiAgICByZXR1cm4gdGhpcy5uZXQucG9zdCgnL2NhcnQvc2V0Y29tbWVudCcsIHtcclxuICAgICAgZGlzaElkOiBkaXNoSWQsXHJcbiAgICAgIGNhcnRJZDogdGhpcy5jYXJ0SUQsXHJcbiAgICAgIGNvbW1lbnQ6IGNvbW1lbnRcclxuICAgIH0pLnBpcGUodGFwKFxyXG4gICAgICByZXMgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0Q2FydElkKHJlcy5jYXJ0LmNhcnRJZCk7XHJcbiAgICAgICAgdGhpcy5jYXJ0Lm5leHQocmVzLmNhcnQpO1xyXG4gICAgICAgIHRoaXMuY2FydElEID0gcmVzLmNhcnQuY2FydElkO1xyXG5cclxuICAgICAgfSwgKCkgPT4geyB9XHJcbiAgICApKVxyXG5cclxuICB9XHJcblxyXG4gIHJlbW92ZURpc2hGcm9tQ2FydCQoZGlzaElkLCBhbW91bnQpIHtcclxuICAgIHJldHVybiB0aGlzLm5ldC5wdXQoJy9jYXJ0L3JlbW92ZScsIHtcclxuICAgICAgZGlzaElkOiBkaXNoSWQsXHJcbiAgICAgIGNhcnRJZDogdGhpcy5jYXJ0SUQsXHJcbiAgICAgIGFtb3VudDogYW1vdW50XHJcbiAgICB9KVxyXG4gICAgICAucGlwZSh0YXAocmVzdWx0ID0+IHtcclxuICAgICAgICB0aGlzLnNldENhcnRJZChyZXN1bHQuY2FydC5jYXJ0SWQpO1xyXG4gICAgICAgIHRoaXMuY2FydC5uZXh0KHJlc3VsdC5jYXJ0KTtcclxuICAgICAgICB0aGlzLmNhcnRJRCA9IHJlc3VsdC5jYXJ0LmNhcnRJZDtcclxuICAgICAgfSkpO1xyXG5cclxuICB9XHJcblxyXG4gIHJlbW92ZURpc2hGcm9tQ2FydChkaXNoSWQsIGFtb3VudCkge1xyXG4gICAgdGhpcy5uZXQucHV0KCcvY2FydC9yZW1vdmUnLCB7XHJcbiAgICAgIGRpc2hJZDogZGlzaElkLFxyXG4gICAgICBjYXJ0SWQ6IHRoaXMuY2FydElELFxyXG4gICAgICBhbW91bnQ6IGFtb3VudFxyXG4gICAgfSkuc3Vic2NyaWJlKFxyXG4gICAgICByZXN1bHQgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0Q2FydElkKHJlc3VsdC5jYXJ0LmNhcnRJZCk7XHJcbiAgICAgICAgdGhpcy5jYXJ0Lm5leHQocmVzdWx0LmNhcnQpO1xyXG4gICAgICAgIHRoaXMuY2FydElEID0gcmVzdWx0LmNhcnQuY2FydElkO1xyXG4gICAgICAgIC8qdGhpcy5ldmVudGVyLmVtaXRNZXNzYWdlRXZlbnQoXHJcbiAgICAgICAgIG5ldyBFdmVudE1lc3NhZ2UoJ3N1Y2Nlc3MnLCAn0KPRgdC/0LXRhScsICfQkdC70Y7QtNC+INGD0YHQv9C10YjQvdC+INGD0LTQsNC70LXQvdC+JylcclxuICAgICAgICAgKTsqL1xyXG5cclxuICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgIC8qdGhpcy5ldmVudGVyLmVtaXRNZXNzYWdlRXZlbnQoXHJcbiAgICAgICAgIG5ldyBFdmVudE1lc3NhZ2UoJ2Vycm9yJywgJ9Ce0YjQuNCx0LrQsCcsICfQndC1INGD0LTQsNC70L7RgdGMINGD0LTQsNC70LjRgtGMINCx0LvRjtC00L4nKVxyXG4gICAgICAgICApKi9cclxuICAgICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgY2hlY2tvdXRDYXJ0KGRhdGEpIHtcclxuICAgIGxldCBvcmRlciA9IHtcclxuICAgICAgY2FydElkOiB0aGlzLmNhcnRJRCxcclxuICAgICAgYWRkcmVzczoge1xyXG4gICAgICAgIHN0cmVldElkOiBkYXRhLnN0cmVldC5pZCxcclxuICAgICAgICBob21lOiBkYXRhLmhvdXNlLFxyXG4gICAgICAgIGhvdXNpbmc6IGRhdGEuaG91c2luZyxcclxuICAgICAgICAvLyBpbmRleDogXCIxMjc4XCIsXHJcbiAgICAgICAgZW50cmFuY2U6IGRhdGEuZW50cmFuY2UsXHJcbiAgICAgICAgZmxvb3I6IGRhdGEuZmxvb3IsXHJcbiAgICAgICAgYXBhcnRtZW50OiBkYXRhLmFwYXJ0bWVudFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgY3VzdG9tZXI6IHtcclxuICAgICAgICBwaG9uZTogZGF0YS5waG9uZSxcclxuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXHJcbiAgICAgICAgbWFpbDogZGF0YS5lbWFpbCB8fCB1bmRlZmluZWRcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiB0aGlzLm9yZGVyQ2FydChvcmRlcik7XHJcblxyXG4gIH1cclxuXHJcbiAgb3JkZXJDYXJ0KGRhdGEpIHtcclxuICAgIHJldHVybiB0aGlzLm5ldC5wb3N0KCcvb3JkZXInLCBkYXRhKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICB0YXAoXHJcbiAgICAgICAgICByZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldENhcnRJZChyZXN1bHQuY2FydC5jYXJ0SWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNhcnQubmV4dChyZXN1bHQuY2FydCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FydElEID0gcmVzdWx0LmNhcnQuY2FydElkO1xyXG5cclxuICAgICAgICAgICAgLyp0aGlzLmV2ZW50ZXIuZW1pdE1lc3NhZ2VFdmVudChcclxuICAgICAgICAgICAgIG5ldyBFdmVudE1lc3NhZ2UoJ3N1Y2Nlc3MnLCAn0KPRgdC/0LXRhScsICfQl9Cw0LrQsNC3INGD0L/QtdGI0L3QviDQvtGE0L7RgNC80LvQtdC9JylcclxuICAgICAgICAgICAgICk7Ki9cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi0J7RiNC40LHQutCwINC+0YTQvtGA0LzQu9C10L3QuNGPIVwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5lcnJvciAmJiBlcnJvci5lcnJvci5jYXJ0KSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRDYXJ0SWQoZXJyb3IuZXJyb3IuY2FydC5jYXJ0SWQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FydC5uZXh0KGVycm9yLmVycm9yLmNhcnQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuY2FydElEID0gZXJyb3IuZXJyb3IuY2FydC5jYXJ0SWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyppZiAoZXJyb3IubWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuZXZlbnRlci5lbWl0TWVzc2FnZUV2ZW50KFxyXG4gICAgICAgICAgICAgICAgbmV3IEV2ZW50TWVzc2FnZShlcnJvci5tZXNzYWdlLnR5cGUsIGVycm9yLm1lc3NhZ2UudGl0bGUsIGVycm9yLm1lc3NhZ2UuYm9keSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuZXZlbnRlci5lbWl0TWVzc2FnZUV2ZW50KFxyXG4gICAgICAgICAgICAgICAgbmV3IEV2ZW50TWVzc2FnZSgnZXJyb3InLCAn0J7RiNC40LHQutCwJywgJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0L7RhNC+0YDQvNC40YLRjCDQt9Cw0LrQsNC3JylcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9Ki9cclxuICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICBjaGVja1N0cmVldFYyKGRhdGEpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMubmV0LnBvc3QoJy9jaGVjaycsIGRhdGEpXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcChcclxuICAgICAgICAgIHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2FydElkKHJlc3VsdC5jYXJ0LmNhcnRJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FydC5uZXh0KHJlc3VsdC5jYXJ0KTtcclxuICAgICAgICAgICAgdGhpcy5jYXJ0SUQgPSByZXN1bHQuY2FydC5jYXJ0SWQ7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgKCkgPT4geyB9XHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tTdHJlZXQoZGF0YSk6IHZvaWQge1xyXG5cclxuICAgIHRoaXMubmV0LnBvc3QoJy9jaGVjaycsIGRhdGEpLnN1YnNjcmliZShcclxuICAgICAgcmVzID0+IHtcclxuICAgICAgICB0aGlzLnNldENhcnRJZChyZXMuY2FydC5jYXJ0SWQpO1xyXG4gICAgICAgIHRoaXMuY2FydC5uZXh0KHJlcy5jYXJ0KTtcclxuICAgICAgICB0aGlzLmNhcnRJRCA9IHJlcy5jYXJ0LmNhcnRJZDtcclxuICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvci5lcnJvcikge1xyXG4gICAgICAgICAgaWYgKGVycm9yLmVycm9yLmNhcnQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRDYXJ0SWQoZXJyb3IuZXJyb3IuY2FydC5jYXJ0SWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNhcnQubmV4dChlcnJvci5lcnJvci5jYXJ0KTtcclxuICAgICAgICAgICAgdGhpcy5jYXJ0SUQgPSBlcnJvci5lcnJvci5jYXJ0LmNhcnRJZDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8qdGhpcy5ldmVudGVyLmVtaXRNZXNzYWdlRXZlbnQoXHJcbiAgICAgICAgICAgbmV3IEV2ZW50TWVzc2FnZShlcnJvci5lcnJvci5tZXNzYWdlLnR5cGUsIGVycm9yLmVycm9yLm1lc3NhZ2UudGl0bGUsIGVycm9yLmVycm9yLm1lc3NhZ2UuYm9keSlcclxuICAgICAgICAgICApOyovXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRDYXJ0SWQoY2FydElEKSB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2FydElEJywgY2FydElEKTtcclxuICAgIHRoaXMuY2FydElEID0gY2FydElEO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2FydElkKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2NhcnRJRCcpO1xyXG4gICAgdGhpcy5jYXJ0SUQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgdXNlckNhcnQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmNhcnQ7XHJcbiAgfVxyXG5cclxuICBzZXRNb2RpZmlyZXMobW9kaWZpcmVzLCBtZXNzYWdlcz86IEV2ZW50TWVzc2FnZVtdKTogdm9pZCB7XHJcbiAgICB0aGlzLm1vZGlmaXJlcy5uZXh0KG1vZGlmaXJlcyk7XHJcbiAgICBpZiAobWVzc2FnZXMpIHtcclxuICAgICAgdGhpcy5tb2RpZmlyZXNNZXNzYWdlLm5leHQobWVzc2FnZXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldE1vZGlmaXJlcygpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMubW9kaWZpcmVzLnBpcGUoKTtcclxuICB9XHJcblxyXG4gIHByb2R1Y3RJbkNhcnQocHJvZHVjdDogRGlzaExpc3RJdGVtKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYXJ0LnBpcGUoXHJcbiAgICAgIGZpbHRlcihjYXJ0ID0+ICdjYXJ0SWQnIGluIGNhcnQpLFxyXG4gICAgICBtYXAoY2FydCA9PiB7XHJcbiAgICAgICAgcmV0dXJuICEhKGNhcnQgJiYgY2FydD8uZGlzaGVzPy5maW5kKGRpc2hJbkNhcnQgPT4gZGlzaEluQ2FydC5kaXNoLmlkID09PSBwcm9kdWN0LmlkKSlcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXRQaWNrdXBQb2ludHMoY2FydElkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLm5ldC5nZXQ8UGlja3VwUG9pbnRbXT4oJy9waWNrdXBhZGRyZXNlcycsIHRydWUsIHtcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgY2FydElkXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGF5bWVudE1ldGhvZHMoY2FydElkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLm5ldC5nZXQ8UGF5bWVudE1ldGhvZFtdPignL3BheW1lbnRtZXRob2RzJywgdHJ1ZSwge1xyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBjYXJ0SWRcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBpY2t1cFBvaW50IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgYWRkcmVzczogc3RyaW5nO1xyXG4gIG9yZGVyOiBudW1iZXI7XHJcbiAgZW5hYmxlOiBib29sZWFuO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIHVwZGF0ZWRBdDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgUGF5bWVudE1ldGhvZCB7XHJcbiAgaWlrb1BheW1lbnRNZXRob2Q6IGFueSxcclxuICBpZDogc3RyaW5nLFxyXG4gIHRpdGxlOiBzdHJpbmcsXHJcbiAgdHlwZTogc3RyaW5nLFxyXG4gIGFkYXB0ZXI6IHN0cmluZyxcclxuICBvcmRlcjogbnVtYmVyLFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgZW5hYmxlOiBib29sZWFuLFxyXG4gIGNyZWF0ZWRBdDogc3RyaW5nLFxyXG4gIHVwZGF0ZWRBdDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEaXNoSW5DYXJ0IHtcclxuICBhZGRlZEJ5OiBzdHJpbmc7XHJcbiAgYW1vdW50OiBudW1iZXI7XHJcbiAgY2FydDogc3RyaW5nO1xyXG4gIGNvbW1lbnQ6IHN0cmluZztcclxuICBjcmVhdGVkQXQ6IHN0cmluZztcclxuICBkaXNoOiBEaXNoTGlzdEl0ZW07XHJcbiAgaWQ6IG51bWJlcjtcclxuICBpdGVtVG90YWw6IG51bWJlcjtcclxuICBtb2RpZmllcnM6IGFueVtdO1xyXG4gIHBhcmVudDogYW55O1xyXG4gIHRvdGFsV2VpZ2h0OiBudW1iZXI7XHJcbiAgdW5pcXVlSXRlbXM6IG51bWJlcjtcclxuICB1cGRhdGVkQXQ6IHN0cmluZztcclxuICB3ZWlnaHQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIENhcnQge1xyXG4gIGFkZHJlc3M6IGFueVxyXG4gIGNhcnRJZDogc3RyaW5nXHJcbiAgY2FydFRvdGFsOiBudW1iZXJcclxuICBjb21tZW50OiBzdHJpbmdcclxuICBjcmVhdGVkQXQ6IHN0cmluZ1xyXG4gIGN1c3RvbWVyOiBzdHJpbmdcclxuICBkZWxpdmVyeTogYW55XHJcbiAgZGVsaXZlcnlEZXNjcmlwdGlvbjogc3RyaW5nXHJcbiAgZGVsaXZlcnlJdGVtOiBhbnlcclxuICBkZWxpdmVyeVN0YXR1czogYW55XHJcbiAgZGlzaGVzOiBEaXNoSW5DYXJ0W11cclxuICBkaXNoZXNDb3VudDogbnVtYmVyXHJcbiAgaGlzdG9yeTogYW55XHJcbiAgaWQ6IHN0cmluZ1xyXG4gIG1lc3NhZ2U6IGFueVxyXG4gIG1vZGlmaWVyczogYW55XHJcbiAgbmFtZU9mTW9kZWw6IGFueVxyXG4gIHBlcnNvbnNDb3VudDogbnVtYmVyXHJcbiAgcHJvYmxlbTogYm9vbGVhblxyXG4gIHJtc0lkOiBzdHJpbmdcclxuICBzZWxmRGVsaXZlcnk6IGJvb2xlYW5cclxuICBzZW5kVG9JaWtvOiBib29sZWFuXHJcbiAgc3RhdGU6IHN0cmluZ1xyXG4gIHRvdGFsV2VpZ2h0OiBzdHJpbmdcclxuICB1bmlxdWVEaXNoZXM6IHN0cmluZ1xyXG4gIHVwZGF0ZWRBdDogc3RyaW5nXHJcbiAgdXNlcjogYW55XHJcbiAgRnJlZURlbGl2ZXJ5RnJvbU1lc3NhZ2U6IHN0cmluZ1xyXG4gIGRhdGU6IG51bGxcclxuICBkZWxpdmVyeVRpbWVNZXNzYWdlOiBzdHJpbmdcclxuICBkZWxpdmVyeUNvc3Q6IG51bWJlclxyXG4gIGRpc2NvdW50VG90YWw6IG51bWJlclxyXG4gIGlzUGF5bWVudFByb21pc2U6IGJvb2xlYW5cclxuICBvcmRlckRhdGU6IHN0cmluZ1xyXG4gIG9yZGVyRGF0ZUxpbWl0OiBzdHJpbmdcclxuICBvcmRlclRvdGFsOiBudW1iZXJcclxuICBwYWlkOiBib29sZWFuXHJcbiAgcGF5bWVudE1ldGhvZDogc3RyaW5nXHJcbiAgcGF5bWVudE1ldGhvZFRpdGxlOiBzdHJpbmdcclxuICByZWNvbW1lbmRzOiBEaXNoTGlzdEl0ZW1bXTtcclxuICBybXNEZWxpdmVyZWQ6IGJvb2xlYW5cclxuICBybXNEZWxpdmVyeURhdGU6IG51bGxcclxuICBybXNFcnJvckNvZGU6IG51bGxcclxuICBybXNFcnJvck1lc3NhZ2U6IG51bGxcclxuICBybXNPcmRlckRhdGE6IG51bGxcclxuICBybXNPcmRlck51bWJlcjogbnVsbFxyXG4gIHJtc1N0YXR1c0NvZGU6IG51bGxcclxuICBzZWxmU2VydmljZTogYm9vbGVhblxyXG4gIHNob3J0SWQ6IHN0cmluZ1xyXG4gIHRvdGFsOiBudW1iZXJcclxuICB1bnRpbEZyZWVEZWxpdmVyeU1lc3NhZ2U6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGlzaExpc3RJdGVtIHtcclxuICBhZGRpdGlvbmFsSW5mbzogYW55XHJcbiAgYmFsYW5jZTogbnVtYmVyXHJcbiAgY2FyYm9oeWRyYXRlQW1vdW50OiBudW1iZXJcclxuICBjYXJib2h5ZHJhdGVGdWxsQW1vdW50OiBudW1iZXJcclxuICBjb2RlOiBzdHJpbmdcclxuICBjcmVhdGVkQXQ6IHN0cmluZ1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcclxuICBkaWZmZXJlbnRQcmljZXNPbjogYW55W11cclxuICBkb05vdFByaW50SW5DaGVxdWU6IGJvb2xlYW5cclxuICBlbmVyZ3lBbW91bnQ6IG51bWJlclxyXG4gIGVuZXJneUZ1bGxBbW91bnQ6IG51bWJlclxyXG4gIGZhdEFtb3VudDogbnVtYmVyXHJcbiAgZmF0RnVsbEFtb3VudDogbnVtYmVyXHJcbiAgZmliZXJBbW91bnQ6IG51bWJlclxyXG4gIGZpYmVyRnVsbEFtb3VudDogbnVtYmVyXHJcbiAgZ3JvdXBJZDogYW55XHJcbiAgZ3JvdXBNb2RpZmllcnM6IFtdXHJcbiAgaGFzaDogbnVtYmVyXHJcbiAgaWQ6IHN0cmluZ1xyXG4gIGltYWdlczogRGlzaEltYWdlSXRlbVtdXHJcbiAgaW1hZ2VzTGlzdDogRGlzaEltYWdlSXRlbVtdXHJcbiAgaXNEZWxldGVkOiBib29sZWFuXHJcbiAgaXNJbmNsdWRlZEluTWVudTogYm9vbGVhblxyXG4gIG1lYXN1cmVVbml0OiBzdHJpbmdcclxuICBtb2RpZmllcnM6IERpc2hNb2RpZmllcltdXHJcbiAgbmFtZTogc3RyaW5nXHJcbiAgb3JkZXI6IG51bWJlclxyXG4gIHBhcmVudEdyb3VwOiBzdHJpbmdcclxuICBwcmljZTogbnVtYmVyXHJcbiAgcHJvZHVjdENhdGVnb3J5SWQ6IHN0cmluZ1xyXG4gIHByb2hpYml0ZWRUb1NhbGVPbjogYW55W11cclxuICBybXNJZDogc3RyaW5nXHJcbiAgc2VvRGVzY3JpcHRpb246IGFueVxyXG4gIHNlb0tleXdvcmRzOiBhbnlcclxuICBzZW9UZXh0OiBhbnlcclxuICBzZW9UaXRsZTogYW55XHJcbiAgc2x1Zzogc3RyaW5nXHJcbiAgdGFnczogYW55W11cclxuICB0YWdzTGlzdDogYW55W11cclxuICB0eXBlOiBzdHJpbmdcclxuICB1cGRhdGVkQXQ6IHN0cmluZ1xyXG4gIHVzZUJhbGFuY2VGb3JTZWxsOiBib29sZWFuXHJcbiAgd2VpZ2h0OiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpc2hJbWFnZVVybHMge1xyXG4gIGxhcmdlOiBzdHJpbmdcclxuICBvcmlnaW46IHN0cmluZ1xyXG4gIHNtYWxsOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpc2hJbWFnZUl0ZW0ge1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nXHJcbiAgZ3JvdXA6IGFueVxyXG4gIGlkOiBzdHJpbmdcclxuICBpbWFnZXM6IERpc2hJbWFnZVVybHNcclxuICB1cGRhdGVkQXQ6IHN0cmluZ1xyXG4gIHVwbG9hZERhdGU6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGlzaEJhc2VNb2RpZmllciB7XHJcbiAgbWF4QW1vdW50OiBudW1iZXJcclxuICBtaW5BbW91bnQ6IG51bWJlclxyXG4gIG1vZGlmaWVySWQ6IHN0cmluZ1xyXG4gIHJlcXVpcmVkOiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEaXNoTW9kaWZpZXIgZXh0ZW5kcyBEaXNoQmFzZU1vZGlmaWVyIHtcclxuICBjaGlsZE1vZGlmaWVyczogRGlzaENoaWxkTW9kaWZpZXJbXVxyXG4gIGNoaWxkTW9kaWZpZXJzSGF2ZU1pbk1heFJlc3RyaWN0aW9uczogYm9vbGVhblxyXG4gIGdyb3VwOiBEaXNoTGlzdEl0ZW1cclxufVxyXG5cclxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpc2hDaGlsZE1vZGlmaWVyIGV4dGVuZHMgRGlzaEJhc2VNb2RpZmllciB7XHJcbiAgZGVmYXVsdEFtb3VudDogbnVtYmVyXHJcbiAgaGlkZUlmRGVmYXVsdEFtb3VudDogYm9vbGVhblxyXG4gIGRpc2g6IERpc2hMaXN0SXRlbVxyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgV29ya1RpbWVCYXNlIHtcclxuICBzdGFydDogc3RyaW5nO1xyXG4gIHN0b3A6IHN0cmluZztcclxuICBicmVhazogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgV29ya1RpbWUgZXh0ZW5kcyBXb3JrVGltZUJhc2Uge1xyXG4gIGRheU9mV2Vlazogc3RyaW5nXHJcbiAgc2VsZlNlcnZpY2U6IFdvcmtUaW1lQmFzZVxyXG59XHJcblxyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgUmVzdHJpY3Rpb25zT3JkZXIge1xyXG4gIG1pbkRlbGl2ZXJ5VGltZTogc3RyaW5nXHJcbiAgZGVsaXZlcnlUb1RpbWVFbmFibGVkOiBib29sZWFuXHJcbiAgcGVyaW9kUG9zc2libGVGb3JPcmRlcjogbnVtYmVyXHJcbiAgdGltZXpvbmU6IHN0cmluZ1xyXG4gIHdvcmtUaW1lOiBXb3JrVGltZVtdXHJcbn1cclxuXHJcbiJdfQ==